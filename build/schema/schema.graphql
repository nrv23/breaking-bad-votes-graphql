type Query { # obtienen informaci√≥n
  hello: String!
  helloWithName(name: String): String!
  peopleNumber: Int!
  booksList: Result!  # [Book!]! # una lista de libros donde no permite datos nulos
  peopleList: Result!
  #elementos seleccionados
  getBook(id: ID!): Result! # Book! #el parametro de entrada y el valor de salida son obligatorios
  getPerson(id: ID!): Result! # se cambia el tipo de dato a Result para que trabaje con el mismo tipo de dato
  # que Book, como result devuelve datos de tipo union, el resultado puede ser Book o People dependiendo de lo 
  # que se consulte
}

type Mutation { # estos tipos de query, editan la informacion

  addBook(book: BookInput!): Result!
  updateBook(book: BookInput!): Result! # los parametros de tipo personalizados como Book o People no se puede pasar directamente
  # Se usa el tipo de variable input
  deleteBook(id: ID!): Result!


  addPerson(person: PeopleInput!): Result!
  updatePerson(person: PeopleInput!): Result! # los parametros de tipo personalizados como Book o People no se puede pasar directamente
  # Se usa el tipo de variable input
  deletePerson(id: ID!): Result!
}

#informacion de los libros
type Book {
  id: ID
  title: String!
  isbn: String!
  pageCount: Int!
  publishedDate: String
  thumbnailUrl: String
  shortDescription: String
  longDescription: String
  status: String!
  authors: [String!]! #indica que va devolver un array de de tipo string donde no pueden existir datos nulos

  byPeopleBuy: [People]
}

#informacion de las personas
type People {
  id: ID!
  name: String!
  email: String!
  website: String
  github: String
  twitter: String
  books: [String!]!
  #Libros que ha comprado la persona

  booksBuy: [Book] # no va ser un dato que devuelve un valor requerido porque puede ser que una persona no ha comprado ningun libro
}

#definir resutlado con mas de detalle

type Result {
  status: Boolean!
  message: String!
  list: [Data!] #Los campos list y item como estan tipados con un dato de tipo union, pueden devolver resultados de type Book o type People
  item: Data
}

#tipo de dato union en graphql permite tipar de varias formas posibles un dato

union Data = Book | People

input BookInput { 

  id:ID
  title: String!
  isbn: String!
  pageCount: Int!
  publishedDate: String
  thumbnailUrl: String
  shortDescription: String
  longDescription: String
  status: StatusBookEnum = UNPUBLISH # estabelcer un valor como tipo enum y dejarle un valor por defecto
  authors: [String!]! #indica que va devolver un array de de tipo string donde no pueden existir datos nulos
 }

 enum StatusBookEnum { #establecer una lista de valores posibles para el estado del libro
  PUBLISH,
  UNPUBLISH
 }



 input PeopleInput {

    id: ID
    name: String!
    email: String!
    website: String
    github: String
    twitter: String
    books: [String!]!
    #Libros que ha comprado la persona
    #booksBuy: [Book] # no va ser un dato que devuelve un valor requerido porque puede ser que una persona no ha comprado ningun libro
 }